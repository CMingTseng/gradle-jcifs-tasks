/**
 * Build script for publishing JARs into the Maven central repository.
 * Metadata properties must be provided by gradle.properties.
 */
apply plugin: 'signing'
apply plugin: 'maven'

def validProperty = { String propertyName ->
    try { project.property(propertyName) != null }
    catch (MissingPropertyException ignore) { false }
}

def askPassword = { String prompt -> System.console().readPassword(prompt).toString() }

assert validProperty('signing.keyId'),             'properties for signing must be provided'
assert validProperty('signing.secretKeyRingFile'), 'properties for signing must be provided'
assert validProperty('sonatypeUsername'),          'properties for publish must be provided'
assert validProperty('sonatypeFullname'),          'properties for publish must be provided'

ext.'signing.password' = askPassword("Enter password for PGP key ${property('signing.keyId')}: ")
ext.'sonatypePassword' = askPassword("Enter password for ${sonatypeUsername}@oss.sonatype.org: ")

signing {
    sign configurations.archives
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }
        beforeDeployment { signing.signPom(it) }
        pom.project {
            name 'Gradle Plugin Blank Project'
            packaging 'jar'
            description project.description
            url 'https://github.com/int128/gradle-ssh-blank'
            scm {
                url                         'git@github.com:int128/gradle-ssh-blank.git'
                connection          'scm:git:git@github.com:int128/gradle-ssh-blank.git'
                developerConnection 'scm:git:git@github.com:int128/gradle-ssh-blank.git'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id sonatypeUsername
                    name sonatypeFullname
                }
            }
        }
    }
}

task publishMavenCentral(dependsOn: tasks.uploadArchives) {
}
